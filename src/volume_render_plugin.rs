//! This example shows how to create a custom render pass that runs after the main pass
//! and reads the texture generated by the main pass.
//!
//! The example shader is a very simple implementation of chromatic aberration.
//!
//! This is a fairly low level example and assumes some familiarity with rendering concepts and wgpu.

use std::cmp::Reverse;

use bevy::{
    core_pipeline::core_3d::prepare_core_3d_depth_textures,
    render::{
        self,
        render_resource::{Extent3d, TextureDescriptor, TextureDimension, TextureUsages},
        texture::TextureCache,
    },
    utils::HashMap,
};
#[allow(unused)]
use bevy::{
    core_pipeline::{core_3d, fullscreen_vertex_shader::fullscreen_shader_vertex_state},
    ecs::query::QueryItem,
    pbr::{
        DrawMesh, MeshPipeline, MeshPipelineKey, MeshUniform, SetMeshBindGroup,
        SetMeshViewBindGroup,
    },
    prelude::*,
    render::{
        camera::ExtractedCamera,
        extract_component::{
            ComponentUniforms, ExtractComponent, ExtractComponentPlugin, UniformComponentPlugin,
        },
        render_asset::RenderAssets,
        render_graph::{
            Node, NodeRunError, RenderGraphApp, RenderGraphContext, ViewNode, ViewNodeRunner,
        },
        render_phase::{
            AddRenderCommand, CachedRenderPipelinePhaseItem, DrawFunctionId, DrawFunctions,
            PhaseItem, RenderPhase, SetItemPipeline,
        },
        render_resource::{
            BindGroupDescriptor, BindGroupEntry, BindGroupLayout, BindGroupLayoutDescriptor,
            BindGroupLayoutEntry, BindingResource, BindingType, CachedRenderPipelineId,
            ColorTargetState, ColorWrites, FragmentState, LoadOp, MultisampleState, Operations,
            PipelineCache, PrimitiveState, RenderPassColorAttachment, RenderPassDescriptor,
            RenderPipelineDescriptor, Sampler, SamplerBindingType, SamplerDescriptor, ShaderStages,
            ShaderType, SpecializedMeshPipeline, SpecializedMeshPipelineError,
            SpecializedMeshPipelines, TextureFormat, TextureSampleType, TextureViewDimension,
        },
        renderer::{RenderContext, RenderDevice},
        texture::{BevyDefault, CachedTexture},
        view::{ExtractedView, ViewDepthTexture, ViewTarget},
        Extract, Render, RenderApp, RenderSet,
    },
    utils::FloatOrd,
};

#[derive(Component, Default, Clone, ExtractComponent, ShaderType)]
pub struct VolumeMarker {
    pub dummy_data: f32,
}

pub struct VolumeRenderPlugin;

impl Plugin for VolumeRenderPlugin {
    fn build(&self, app: &mut App) {
        app.add_plugins((
            ExtractComponentPlugin::<VolumeMarker>::default(),
            UniformComponentPlugin::<VolumeMarker>::default(),
        ));
        app.sub_app_mut(RenderApp)
            .init_resource::<DrawFunctions<VolumeRender>>()
            .add_render_command::<VolumeRender, DrawVolumeRender>()
            .init_resource::<SpecializedMeshPipelines<VolumeRenderPipeline>>()
            .add_systems(ExtractSchedule, extract_camera_volume_phase)
            .add_systems(
                Render,
                (
                    queue_volume_render.in_set(RenderSet::Queue),
                    prepare_volume_render_textures
                        .in_set(RenderSet::Prepare)
                        .after(render::view::prepare_windows),
                ),
            )
            .add_render_graph_node::<ViewNodeRunner<VolumeRenderNode>>(
                core_3d::graph::NAME,
                VolumeRenderNode::NAME,
            )
            .add_render_graph_edges(
                core_3d::graph::NAME,
                &[
                    core_3d::graph::node::MAIN_TRANSPARENT_PASS,
                    VolumeRenderNode::NAME,
                    core_3d::graph::node::END_MAIN_PASS_POST_PROCESSING,
                ],
            );
    }

    fn finish(&self, app: &mut App) {
        // We need to get the render app from the main app
        let Ok(render_app) = app.get_sub_app_mut(RenderApp) else {
            return;
        };

        render_app
            .init_resource::<VolumeBlendPipeline>()
            // Initialize the pipeline
            .init_resource::<VolumeRenderPipeline>();
    }
}

#[derive(Bundle, Clone)]
pub struct VolumeRenderBundle {
    pub mesh: Handle<Mesh>,
    pub volume: VolumeMarker,
    pub transform: Transform,
    pub global_transform: GlobalTransform,
    /// User indication of whether an entity is visible
    pub visibility: Visibility,
    /// Algorithmically-computed indication of whether an entity is visible and should be extracted for rendering
    pub computed_visibility: ComputedVisibility,
}

impl Default for VolumeRenderBundle {
    fn default() -> Self {
        Self {
            mesh: Default::default(),
            volume: Default::default(),
            transform: Default::default(),
            global_transform: Default::default(),
            visibility: Default::default(),
            computed_visibility: Default::default(),
        }
    }
}

pub struct VolumeRender {
    pub distance: f32,
    // Per-object data may be bound at different dynamic offsets within a buffer. If it is, then
    // each batch of per-object data starts at the same dynamic offset.
    // pub per_object_binding_dynamic_offset: u32,
    pub entity: Entity,
    pub pipeline_id: CachedRenderPipelineId,
    pub draw_function: DrawFunctionId,
}

impl PhaseItem for VolumeRender {
    type SortKey = Reverse<FloatOrd>;

    #[inline]
    fn entity(&self) -> Entity {
        self.entity
    }

    #[inline]
    fn sort_key(&self) -> Self::SortKey {
        Reverse(FloatOrd(self.distance))
    }

    #[inline]
    fn draw_function(&self) -> DrawFunctionId {
        self.draw_function
    }

    #[inline]
    fn sort(items: &mut [Self]) {
        items.sort_by_key(|item| item.sort_key());
    }
}

impl CachedRenderPipelinePhaseItem for VolumeRender {
    #[inline]
    fn cached_pipeline(&self) -> CachedRenderPipelineId {
        self.pipeline_id
    }
}

#[derive(Component)]
struct ViewVolumeRenderTextures {
    render_target: CachedTexture,
    depth_texture: CachedTexture,
}

#[derive(Component, Default, Clone, Copy, ExtractComponent, ShaderType)]
struct VolumeBlendSettings {
    intensity: f32,
}

#[derive(Default)]
struct VolumeRenderNode;

impl VolumeRenderNode {
    pub const NAME: &str = "volume_render";
}

impl ViewNode for VolumeRenderNode {
    type ViewQuery = (
        &'static ExtractedCamera,
        &'static RenderPhase<VolumeRender>,
        &'static ViewDepthTexture,
        &'static ViewVolumeRenderTextures,
        &'static ViewTarget,
    );

    fn run(
        &self,
        graph: &mut RenderGraphContext,
        render_context: &mut RenderContext,
        (
            camera,
            volume_render_phase,
            view_depth_texture,
            view_volume_render_target,
            view_target,
        ): QueryItem<Self::ViewQuery>,
        world: &World,
    ) -> Result<(), NodeRunError> {
        // Get the entity of the view for the render graph where this node is running
        let view_entity = graph.view_entity();
        // view_target.main_texture_format()
        dbg!("entered run!");
        dbg!(view_volume_render_target.depth_texture.texture.format());
        render_context.command_encoder().copy_texture_to_texture(
            view_depth_texture.texture.as_image_copy(),
            view_volume_render_target
                .depth_texture
                .texture
                .as_image_copy(),
            view_volume_render_target.depth_texture.texture.size(),
        );
        dbg!("copied depth");

        {
            let mut render_pass = render_context.begin_tracked_render_pass(RenderPassDescriptor {
                label: Some("volume_render_pass"),
                color_attachments: &[Some(RenderPassColorAttachment {
                    // We need to specify the post process destination view here
                    // to make sure we write to the appropriate texture.
                    view: &view_volume_render_target.render_target.default_view,
                    resolve_target: None,
                    ops: Operations {
                        load: LoadOp::Clear(Color::rgb_linear(0.0, 0.0, 0.0).into()),
                        store: true,
                    },
                })],
                depth_stencil_attachment: None,
            });

            if let Some(viewport) = camera.viewport.as_ref() {
                render_pass.set_camera_viewport(viewport);
            }

            dbg!("just before render submission");
            volume_render_phase.render(&mut render_pass, world, view_entity);
        }
        dbg!("volume render done");

        {
            // Get the pipeline resource that contains the global data we need to create the render pipeline
            let blend_pipeline = world.resource::<VolumeBlendPipeline>();

            // The pipeline cache is a cache of all previously created pipelines.
            // It is required to avoid creating a new pipeline each frame, which is expensive due to shader compilation.
            let pipeline_cache = world.resource::<PipelineCache>();

            // Get the pipeline from the cache
            let Some(blend_render_pipeline) = pipeline_cache.get_render_pipeline(blend_pipeline.pipeline_id) else {
                return Ok(());
            };

            // Get the settings uniform binding
            let settings_uniforms = world.resource::<ComponentUniforms<VolumeBlendSettings>>();
            let Some(settings_binding) = settings_uniforms.uniforms().binding() else {
                return Ok(());
            };

            let bind_group =
                render_context
                    .render_device()
                    .create_bind_group(&BindGroupDescriptor {
                        label: Some("post_process_bind_group"),
                        layout: &blend_pipeline.layout,
                        // It's important for this to match the BindGroupLayout defined in the PostProcessPipeline
                        entries: &[
                            BindGroupEntry {
                                binding: 0,
                                // Make sure to use the source view
                                resource: BindingResource::TextureView(
                                    &view_volume_render_target.render_target.default_view,
                                ),
                            },
                            BindGroupEntry {
                                binding: 1,
                                // Use the sampler created for the pipeline
                                resource: BindingResource::Sampler(&blend_pipeline.sampler),
                            },
                            BindGroupEntry {
                                binding: 2,
                                // Set the settings binding
                                resource: settings_binding.clone(),
                            },
                        ],
                    });

            let attachment = view_target.get_color_attachment(Operations {
                load: LoadOp::Load,
                store: true,
            });

            let mut blend_pass = render_context.begin_tracked_render_pass(RenderPassDescriptor {
                label: Some("volume_blend_pass"),
                color_attachments: &[Some(attachment)],
                depth_stencil_attachment: None,
            });

            blend_pass.set_render_pipeline(blend_render_pipeline);
            blend_pass.set_bind_group(0, &bind_group, &[]);
            blend_pass.draw(0..3, 0..1);
        }
        dbg!("blend done");

        Ok(())
    }
}

#[derive(Resource)]
struct VolumeBlendPipeline {
    layout: BindGroupLayout,
    sampler: Sampler,
    pipeline_id: CachedRenderPipelineId,
}

impl FromWorld for VolumeBlendPipeline {
    fn from_world(world: &mut World) -> Self {
        dbg!("fromworld");
        let render_device = world.resource::<RenderDevice>();

        // We need to define the bind group layout used for our pipeline
        let layout = render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
            label: Some("post_process_bind_group_layout"),
            entries: &[
                // The screen texture
                BindGroupLayoutEntry {
                    binding: 0,
                    visibility: ShaderStages::FRAGMENT,
                    ty: BindingType::Texture {
                        sample_type: TextureSampleType::Float { filterable: true },
                        view_dimension: TextureViewDimension::D2,
                        multisampled: false,
                    },
                    count: None,
                },
                // The sampler that will be used to sample the screen texture
                BindGroupLayoutEntry {
                    binding: 1,
                    visibility: ShaderStages::FRAGMENT,
                    ty: BindingType::Sampler(SamplerBindingType::Filtering),
                    count: None,
                },
                // The settings uniform that will control the effect
                BindGroupLayoutEntry {
                    binding: 2,
                    visibility: ShaderStages::FRAGMENT,
                    ty: BindingType::Buffer {
                        ty: bevy::render::render_resource::BufferBindingType::Uniform,
                        has_dynamic_offset: false,
                        min_binding_size: None,
                    },
                    count: None,
                },
            ],
        });

        // We can create the sampler here since it won't change at runtime and doesn't depend on the view
        let sampler = render_device.create_sampler(&SamplerDescriptor::default());

        // Get the shader handle
        let shader = world.resource::<AssetServer>().load("volume_blend.wgsl");

        let pipeline_id = world
            .resource_mut::<PipelineCache>()
            // This will add the pipeline to the cache and queue it's creation
            .queue_render_pipeline(RenderPipelineDescriptor {
                label: Some("volume_blend_pipeline".into()),
                layout: vec![layout.clone()],
                // This will setup a fullscreen triangle for the vertex state
                vertex: fullscreen_shader_vertex_state(),
                fragment: Some(FragmentState {
                    shader,
                    shader_defs: vec![],
                    // Make sure this matches the entry point of your shader.
                    // It can be anything as long as it matches here and in the shader.
                    entry_point: "fragment".into(),
                    targets: vec![Some(ColorTargetState {
                        format: TextureFormat::bevy_default(),
                        blend: None,
                        write_mask: ColorWrites::ALL,
                    })],
                }),
                // All of the following properties are not important for this effect so just use the default values.
                // This struct doesn't have the Default trait implemented because not all field can have a default value.
                primitive: PrimitiveState::default(),
                depth_stencil: None,
                multisample: MultisampleState::default(),
                push_constant_ranges: vec![],
            });

        Self {
            layout,
            sampler,
            pipeline_id,
        }
    }
}

// This contains global data used by the render pipeline. This will be created once on startup.
#[derive(Resource)]
pub struct VolumeRenderPipeline {
    shader: Handle<Shader>,
    mesh_pipeline: MeshPipeline,
}

impl FromWorld for VolumeRenderPipeline {
    fn from_world(world: &mut World) -> Self {
        let asset_server = world.resource::<AssetServer>();
        let shader = asset_server.load("volume_render.wgsl");

        let mesh_pipeline = world.resource::<MeshPipeline>();

        VolumeRenderPipeline {
            shader,
            mesh_pipeline: mesh_pipeline.clone(),
        }
    }
}

impl SpecializedMeshPipeline for VolumeRenderPipeline {
    type Key = MeshPipelineKey;

    fn specialize(
        &self,
        key: Self::Key,
        layout: &bevy::render::mesh::MeshVertexBufferLayout,
    ) -> Result<RenderPipelineDescriptor, SpecializedMeshPipelineError> {
        dbg!(layout);
        let mut descriptor = self.mesh_pipeline.specialize(key, layout)?;
        descriptor.label = Some("Volume render".into());
        dbg!(layout);

        descriptor.vertex.shader = self.shader.clone();

        descriptor
            .vertex
            .shader_defs
            .push("MESH_BINDGROUP_1".into());

        descriptor.fragment.as_mut().unwrap().shader = self.shader.clone();

        dbg!(descriptor.layout.len());

        descriptor.depth_stencil = None;
        
        Ok(descriptor)
    }
}

type DrawVolumeRender = (
    SetItemPipeline,
    SetMeshViewBindGroup<0>,
    SetMeshBindGroup<1>,
    DrawMesh,
);

fn queue_volume_render(
    volume_render_drawfunctions: Res<DrawFunctions<VolumeRender>>,
    custom_pipeline: Res<VolumeRenderPipeline>,
    mut pipelines: ResMut<SpecializedMeshPipelines<VolumeRenderPipeline>>,
    pipeline_cache: Res<PipelineCache>,
    meshes: Res<RenderAssets<Mesh>>,
    mut views: Query<(&ExtractedView, &mut RenderPhase<VolumeRender>)>,
    volume_meshes: Query<(Entity, &MeshUniform, &Handle<Mesh>), With<VolumeMarker>>,
) {
    let draw_function = volume_render_drawfunctions.read().id::<DrawVolumeRender>();

    for (view, mut volume_phase) in &mut views {
        let view_key = MeshPipelineKey::from_hdr(view.hdr);
        let rangefinder = view.rangefinder3d();
        for (entity, mesh_uniform, mesh_handle) in &volume_meshes {
            if let Some(mesh) = meshes.get(mesh_handle) {
                let key =
                    view_key | MeshPipelineKey::from_primitive_topology(mesh.primitive_topology);
                let pipeline = pipelines
                    .specialize(&pipeline_cache, &custom_pipeline, key, &mesh.layout)
                    .unwrap();
                volume_phase.add(VolumeRender {
                    entity,
                    pipeline_id: pipeline,
                    draw_function,
                    distance: rangefinder.distance(&mesh_uniform.transform),
                });
            }
        }
    }
}

pub fn extract_camera_volume_phase(
    mut commands: Commands,
    cameras_3d: Extract<Query<(Entity, &Camera), With<Camera3d>>>,
) {
    for (entity, camera) in &cameras_3d {
        if camera.is_active {
            commands
                .get_or_spawn(entity)
                .insert((RenderPhase::<VolumeRender>::default(),));
        }
    }
}

pub fn prepare_volume_render_textures(
    mut commands: Commands,
    mut texture_cache: ResMut<TextureCache>,
    render_device: Res<RenderDevice>,
    views_3d: Query<(Entity, &ExtractedCamera, &ViewTarget), (With<RenderPhase<VolumeRender>>,)>,
) {
    let mut textures = HashMap::default();
    for (entity, camera, view_target) in &views_3d {
        let Some(physical_target_size) = camera.physical_target_size else {
            continue;
        };
        let size = Extent3d {
            depth_or_array_layers: 1,
            width: physical_target_size.x,
            height: physical_target_size.y,
        };

        let (render, depth) = textures
            .entry(camera.target.clone())
            .or_insert_with(|| {
                // Default usage required to write to the depth texture
                let render = {
                    let usage = TextureUsages::RENDER_ATTACHMENT | TextureUsages::TEXTURE_BINDING;
                    // The size of the depth texture
                    let descriptor = TextureDescriptor {
                        label: Some("volume_render_target"),
                        size,
                        mip_level_count: 1,
                        sample_count: 1,
                        dimension: TextureDimension::D2,
                        // PERF: vulkan docs recommend using 24 bit depth for better performance
                        format: view_target.main_texture_format(),
                        usage,
                        view_formats: &[],
                    };
                    texture_cache.get(&render_device, descriptor)
                };
                let depth = {
                    let usage = TextureUsages::TEXTURE_BINDING | TextureUsages::COPY_DST;
                    // The size of the depth texture

                    let descriptor = TextureDescriptor {
                        label: Some("volume_depth_buffer"),
                        size,
                        mip_level_count: 1,
                        sample_count: 1,
                        dimension: TextureDimension::D2,
                        // PERF: vulkan docs recommend using 24 bit depth for better performance
                        format: TextureFormat::Depth32Float,
                        usage,
                        view_formats: &[],
                    };
                    texture_cache.get(&render_device, descriptor)
                };
                (render, depth)
            })
            .clone();

        dbg!("preparing");
        commands.entity(entity).insert(ViewVolumeRenderTextures {
            render_target: render,
            depth_texture: depth,
        });
    }
}
